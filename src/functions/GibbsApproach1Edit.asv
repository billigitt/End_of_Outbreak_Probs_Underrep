function output = GibbsApproach1Edit(C, w, rho, GibbsSamples, RpreERT, RERT, ...
    tERTDeployed, tEndCalc, burnin, thinning)

%Most basic approach: We assume that we know the Rt values exactly, and use
%this to inform our inference.

%tEndCalc is the time point up to which we want to calculate probability
%estimates

f = waitbar(0,'1','Name','Calculating risks...',...
    'CreateCancelBtn','setappdata(gcbf,''canceling'',1)');

setappdata(f,'canceling',0);

I = round((1+C)/rho); %'basic' estimate of I
T = length(I);

probGibbsSample = zeros(T, GibbsSamples);

Tinf = 200; %perhaps make this an input?

incidenceStore = cell(tEndCalc - tERTDeployed + 1, 1);
pGeweke = zeros(tEndCalc, 1);

for t = tERTDeployed:tEndCalc

    if getappdata(f,'canceling')
        break
    end

    waitbar((t-tERTDeployed)/(tEndCalc-tERTDeployed),f,sprintf("t = "+t+" (of "+tERTDeployed+" to "+tEndCalc+")"))

    tmpI = I(1:(t-1)); %Always goes back to the 'basic' estimate of I.
    %This could use the previous time-points last estimate to inform it, so
    %that the 'burn in' is less long?

    incidenceStore{t - tERTDeployed + 1} = zeros((t-1), GibbsSamples);

    for j = 1:GibbsSamples

        for i = 1:(t-1)

            rangeI = C(i):ceil(5*(1+C(i))/rho); %perhaps make this a larger range?

            pmfTmp = likelihoodOfTrueIncidence(tmpI, C(1:(t-1)), w, RpreERT, RERT, rangeI, i, tERTDeployed, rho);
            pmfTmp = round(pmfTmp/sum(pmfTmp), 10); %does this still add to 1? This is currently the PMF
            % for the hidden number of infections.
            cmfTmp = cumsum(pmfTmp);

            %tmpI(i) = randsample(length(pmfTmp), 1, true, pmfTmp) + C(i) - 1; % adding C(t) - 1 makes it a sample of the true # of infections
            tmpI(i) = find(rand <= cmfTmp, 1) + C(i) - 1; %check this line is OK- copied from find part from internet
        end

        incidenceStore{t - tERTDeployed + 1}(:, j) = tmpI;

        gammaTmp_t = gamma_tMostBasic([tmpI; zeros(Tinf-t+1, 1)], w, t);
        %add on zeros to get probability of no more cases

        probGibbsSample(t, j) = 1 - exp(-RpreERT*gammaTmp_t); % This is used as opposed to
        %riskWithdrawERT.m because we are not using a distributional estimate.

    end

    [zGeweke(t), ] = geweke(probGibbsSample(t, burnin + 1:thinning:end)');

end
delete(f)

probMoreCases = mean(probGibbsSample(:, burnin + 1:thinning:end), 2);


output = struct('probMoreCases', probMoreCases, 'incidenceStore', incidenceStore, 'pGeweke', pGeweke, 'probGibbsSample', probGibbsSample);

end